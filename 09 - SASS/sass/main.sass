// O próximo passo: SASS

// Até agora nós vimos como o CSS sozinho é poderoso. Podemos fazer muita
// coisa coisa com ele: animacões, variáveis, transicões, mudanca de estado,
// micro-interacões e tudo mais. É uma ferramenta que sendo bem estudada, abre
// portas para nós fazermos coisas incríveis. Depois de absorver e ter uma boa
// base, aí sim, finalmente, podemos dar o próximo passo. E não, não estou fa
// _lando de bootstrap, e sim, SASS.

// SASS - ou Syntactically Awesome Stylesheet - é uma extensão que abre um novo
// leque de possibilidades dentro da bela linguagem CSS. Ela nos dá a possibili
// dade de trabalhar com mixins e placeholders, que são basicamente funcões com
// regras para aplicarmos a um elemento, o nesting, que é uma forma mais organi
// _zada e intuitiva de dispor as propriedades dos elementos, e modulos, ajudan
// _do e muito na organizacão do projeto, podendo seprar e importar códigos de
// diferentes documentos.

// Assim então declaramos as variáveis em SASS
$color-primary: orange
$color-secondary: white

::root
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    font-size: 1vw

// Aqui iremos usar e aplicar o sistema de heranca por Placeholder. Podemos
// definir valores para serem importados dentro do elemento que queremos per
// _sonalizar. Vale salientar que em SASS não iremos usar nem ; e nem {}. Is
// _so deixa o código mais limpo e rápido de escrever.
%formatting
    margin: 2% 0 2% 0
    font-size: .8rem
    padding: 3%

// Este é o mixin. Ele é muito parecido com o método de heranca, mas possui
// algumas particularidades, apesar de poder fazer a mesma coisa. Iremos en
// _tender a diferenca mais para frente.

// No mixin abaixo, estou definindo que o background-color e o color, serão
// representados por, respectivamente, $bg e $letter. São variáveis que pode
// _rão ser mudadas depois. Mais explicacões na frente.

@mixin containerStyle($bg: $color-primary, $letter: $color-secondary)
    background-color: $bg
    color: $letter


%flexbox-column
    display: flex
    flex-direction: column
    justify-content: center
    align-items: center
    text-align: center

// Agora iremos ver uma coisa muito muito interessante do SASS: nesting.
// Assim como no HTML, agora devemos colocar um elemento dentro do outro
// para que possamos editá-lo. Em primeiro momento pode ser confuso mas 
// garanto que não é, vejamos: Se perceber o HTML, o container-area está 
// dentro de container-conteudo. Aqui, apesar de não usarmos {}, a idéia
// continua a mesma, aplicando o TAB. Caso um conteudo esteja do lado do
// outro, e não mais a frente, quer dizer que ele não é filho do elemento
// anterior. Isso deixa o código muito mais limpo e fácil de entender.
#container-conteudo
    height: 96vh
    // Aqui estou chamando um conjunto de propriedades para serem aplicadas:
    // sempre usar @extend. Eu "estendi" aquelas propriedades para esse container.
    @extend %flexbox-column
    background-color: black

    // devemos tomar MUITO cuidado com o espacamento das coisas. O elemento
    // abaixo está dentro do container-conteudo, então ele deve estar espa
    // _cado para *frente*, pois isso indica sua posicão. Suas propriedades
    // podem estar definidas certas, mas se ele estiver no lugar errado, o
    // SASS NÃO IRÁ APLICAR E AINDA DARÁ ERRO. Experimente tirar o espaco e
    // verá o que estou querendo dizer.
    .container-area
        max-width: 900px
        width: 100%

    // aqui iremos chamar o mixin que criamos também, lá em cima. Ele, como 
    // pode ver, está acompanhado do @include e está aplicando aquele esti
    // _los ao primeiro container.
    .area0
        @include containerStyle()
        @extend %formatting

// Estilizamos a primeira área neste documento, agora, vamos abrir o próximo
//  documento para estilizar a outra área.